「二分查找」虽然看起来有很多种写法，「递归」和「非递归」，「非递归」又有好几种写法：
while (left <= right)、while (left < right)、while (left + 1 < right)
但核心的思想就一个：逐渐缩小问题规模。

在面对问题的时候，应该将主要精力放在 如何分析。
利用单调性（绝大多数二分查找问题利用的是单调性，也有一些例外）或者题目本身蕴含的可以逐渐缩小问题规模的特性解决问题
而不应该纠结在「二分查找」该怎么写。

总结

1、首先想清楚这道问题为什么可以用二分查找解决（而不应该先纠结二分查找该怎么写）
   利用题目中给出的单调性或者可以缩减问题规模的特点：
   已知某个猜测的答案的结果，就可以推测出比当前猜测小的时候结果如何，比当前猜测大的时候结果如何。
   常见应用为：有序或者半有序数组中找下标，确定一个有范围的整数。

2、首先确定搜索的范围，如果搜索的范围就把正确答案排除在外，那么是无论如何也搜不出正确结果的；

3、可以从「看到的中间元素什么时候不是解」开始思考 if 的语句怎么写，if 的逻辑越简单越好，这样才能保证不会错。
   剩下的复杂的情况留给 else，else 的区间就是剩下的区间；

4、只把区间分成两个部分，代码也写成两个部分，这样，在 while (left < right) 的循环体退出以后，left == right 才成立

5、看到 if 和 else 里有 left = mid 的时候，需要将 mid 调整为上取整。
   原因是当区间里只剩下两个元素的时候，mid 看到右边元素，这样落入 left = mid 的时候，区间才会缩减

6、如果搜索区间里一定存在目标元素，退出 while (left < right) 以后，返回 left 或者 left 代表的值就可以，否则还需要单独做一次判断；

7、不要纠结左闭右闭区间和左闭右开区间。如果你觉得左闭右开区间理解一点问题都没有，当然可以用左闭右开区间定义你的循环不变量。
   我们通篇介绍的二分查找算法的循环不变量是 [left..right] 里可能存在目标元素，left 包括、right 也包括。

8、一旦掌握了二分查找算法的思想，用哪种二分查找的写法就是习惯的问题了。
   模板也是人设计出来的，而且就算是模板，也要有理由。生搬硬套模板是不可以的，一定要明白原理
   有一些模板声称是捷径，很有可能是弯路。写算法问题，不可以靠模板。









